syntax = "proto3";

option csharp_namespace = "MunitSHub";

package bucket;

service BucketsService {
  rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse);
  rpc DeleteBucket(DeleteBucketRequest) returns (BucketServiceStatusResponse);
  rpc GetBucket(GetBucketRequest) returns (BucketResponse);
  rpc GetBuckets(GetBucketsRequest) returns (GetBucketsResponse);
  rpc BucketExistsCheck(BucketExistsCheckRequest) returns (BucketExistsResponse);

  rpc GetBucketMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

// Create
message CreateBucketRequest {
  string bucketName = 1;
  bool versioningEnabled = 2;
  int32 versions_limit = 3;
}

message CreateBucketResponse {
  string bucketId = 1;
}

// Delete bucket 
message DeleteBucketRequest {
  string id = 1;
}

// Get bucket
message GetBucketRequest {
  string id = 1;
}

message BucketResponse {
  string id = 1;
  string name = 2;
  bool versioningEnabled = 3;
  int32 versionsLimit = 4;
  BucketCountersResponse counter = 5;
  string createdAt = 6;
}

message BucketCountersResponse {
  int64 size = 1;
  int64 objectsCount = 2;
  int64 typeAOperationsCount = 3;
  int64 typeBOperationsCount = 4;
}

// Get buckets
message GetBucketsRequest {
  repeated string ids = 1;
}

message GetBucketsResponse {
  repeated BucketResponse buckets = 2;
}

// Check if exists
message BucketExistsCheckRequest {
  string bucketName = 1;
}

message BucketExistsResponse {
  string status = 1;
  bool exists = 2;
}

// Status response
message BucketServiceStatusResponse {
  string status = 1;
}

// Get bucket metrics
message GetMetricsRequest {
  string bucketId = 1;
}

message GetMetricsResponse {
  repeated MetricResponse metrics = 2;
}

message MetricResponse{
  string date = 1;
  int64 typeAOperationsCount = 2;
  int64 typeBOperationsCount = 3;
}